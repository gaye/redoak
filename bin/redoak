#!/usr/bin/env node
var express = require('express');
var path = require('path');
var redoak = require('../lib/redoak');

var argv = process.argv.slice(2);
var useStd = argv.indexOf('--std');

if (useStd >= 0) {
  var data = new Buffer(0);
  process.stdin.resume();
  process.stdin.on('data', function(d) {
    data += d;
  });
  process.stdin.once('end', function() {
    process.stdin.removeAllListeners('data');
    data = data.toString('utf-8');

    var middleware = new redoak.Middleware();
    middleware.once('tree', function() {
      middleware.dispose();
    });
    middleware.addString(data);
  });
} else {
  var filename = argv[0];
  if (!filename) {
    console.error('Must specify an oak file.');
    process.exit(1);
  }

  console.log('Serving up ' + filename + ' on / on 3000.');
  filename = path.resolve(filename);

  var app = express();
  app.configure(function() {
    app.use(express.errorHandler({ dumpExceptions: true, showStack: true }));
    app.use(express.bodyParser());

    var middleware = new redoak.Middleware({ app: app });
    middleware.addFile(filename);

    app.get('/', middleware.get(filename));

    app.get('/debug/js', function(req, res) {
     res.end(middleware.js(filename));
    });

    app.get('/debug/css', function(req, res) {
      res.end(middleware.css(filename));
    });

    var debug = path.resolve(__dirname, '../widgets/debug.html');
    app.get('/debug/', function(req, res) {
      var respond = function() {
        res.end(middleware.html(debug));
      };

      if (!middleware.html(debug)) {
        middleware.addFile(debug);
        middleware.emitter_.once('tree', respond);
      } else {
        respond();
      }
    });
    app.get('/debug/session.js', function(req, res) {
      var obj = {
        files: middleware.tree_.files_,
        tree: middleware.tree_.tree_
      };
      var json = JSON.stringify(obj, function(key, value) {
        if (value && value.nodeType) {
          if (value.tagName) {
            if (value.id) {
              return '(element ' + value.tagName + '#' + value.id + ')';
            } else {
              return '(element ' + value.tagName + ')';
            }
          }
          return '(element)';
        } else {
          return value;
        }
        });
      res.end('var session = ' + json);
    });

    app.use('/', express.static(path.dirname(filename)));
  });

  var socket = app.listen(3000);

  // Currently needed for express 3.0.
  socket.on('upgrade', function() {
    var args = Array.prototype.slice.call(arguments);
    app.emit.apply(app, ['upgrade'].concat(args));
  });
}
