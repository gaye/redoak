[]
  for (var i = 0; i < this.generatedChildren_.length; i++) {
    var j = this.children_.indexOf(this.generatedChildren_[i]);
    this.removeChild(j);
  }
  this.generatedChildren_ = [];
  var widget;
  var stack = new util.TemplateStack(obj);
  var lastElement = null;
  var offset = -1;
  var self = this;
  {{#.}}{{{.}}}{{/.}}

* []
  {{#.}}{{{.}}}{{/.}}

{type=use}
  widget = new Widget({{{use.mixins}}});
  self.addChild(widget);
  self.generatedChildren_.push(widget);
  lastElement = lastElement && offset >= 0 ? 
    lastElement.nextElementSibling :
    self.el().querySelectorAll({{use.qs}})[{{{use.qsi}}}];
  widget.assign(lastElement, {{{use.obj}}});

{type=loop}
  {{#path}}stack.push({{.}});{{/path}}
  stack.loop(function(offset, lastElement) { {{{contents}}} });
  {{#path}}stack.pop();{{/path}}
  {{}}

{type=inverse}
  {{#path}}stack.push({{.}});{{/path}}
  stack.inverse(function() { {{{contents}}} });
  {{#path}}stack.pop();{{/path}}
