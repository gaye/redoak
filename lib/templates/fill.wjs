[]
  {if 0}
  for (var i = 0; i < this.generatedChildren_.length; i++) {
    var j = this.children_.indexOf(this.generatedChildren_[i]);
    this.removeChild(j);
  }
  this.generatedChildren_ = [];
  var qsdict = {};
  var getQsi = function(qs, qsi) {
    var classless = qs.replace(/\.[^ \.]+$/, '');
    if (classless.length != qs.length) {
      getQsi(classless, qsi);
    }
    if (qsdict[qs]) {
      return qsdict[qs]++;
    } else {
      qsdict[qs] = qsi + 1;
      return qsi;
    }
  };
  var widget;
  var a0 = obj;
  var val;
  var self = this;
  {loop .}{{.}}{/}
  {/}
* []

{}.ensurePath *
{}.ensurePath
  {loop .}{if .i is .last}(val = {/}a{{../objref}}{loop .}[{.}]{/}
          {if .i is .last}){/}{if not .i is .last} && {/}{/}
  {if not .}(val = obj){/}

{type=use}
  widget = new Widget({{use.mixins}});
  self.addChild(widget);
  self.generatedChildren_.push(widget);
  widget.assign(self.el().querySelectorAll({use.qs})[
      getQsi({use.qs}, {{use.qsi}})], {{use.obj}});

{type=loop}
  if (Array.isArray({{ensurePath}})) {
    for (var i = 0; i < val.length; i++) {
      (function(obj, last) {
        var val;
        var a{{loopId}} = obj;
        {loop contents}{{.}}
        {/}
      })(val[i], val.length - 1);
    }
  }

{type=if}.clause.value
  {if . is last}last{/}{if not . is last}{.}{/}
{type=if}
  {{clause.ensurePath}};
  if ({if clause.type is simple}!Widget.isEmptyObject(val){/}
      {if clause.type is inverse}Widget.isEmptyObject(val){/}
      {if clause.type is eq}val == {{clause.value}}{/}
      {if clause.type is neq}val != {{clause.value}}{/}) {
    {loop contents}{{.}}
    {/}
  }
