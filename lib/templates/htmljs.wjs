[]
  var result = "";
  var a0 = obj;
  var val;
  {loop .}{{.}}
  {/}
* []

[] > ""
  result += {.};
{type=loop}.contents
  var val;
  var a{{../loopId}} = obj;
  {loop .}{{.}}
  {/}

{}.ensurePath *
{}.ensurePath
  {loop .}{if .i is .last}(val = {/}a{{../objref}}{loop .}[{.}]{/}
          {if .i is .last}){/}{if not .i is .last} && {/}{/}
  {if not .}(val = obj){/}

{type=unbound}
  if (!Widget.isEmptyObject({{ensurePath}})) {
    {if escape}result += Widget.escapeHtml(val);{/}
    {if not escape}result += '' + val;{/}
  }

{type=loop}
  if (Array.isArray({{ensurePath}})) {
    for (var i = 0; i < val.length; i++) {
      (function(obj, last) { {{contents}} })(val[i], val.length - 1);
    }
  }

{type=if}.clause.value
  {if . is last}last{/}{if . is not last}{.}{/}
{type=if}
  {{clause.ensurePath}};
  if ({if clause.type is simple}!Widget.isEmptyObject(val){/}
      {if clause.type is inverse}Widget.isEmptyObject(val){/}
      {if clause.type is eq}val == {{clause.value}}{/}
      {if clause.type is neq}val != {{clause.value}}{/}) {
    {loop contents}{{.}}{/}
  }
